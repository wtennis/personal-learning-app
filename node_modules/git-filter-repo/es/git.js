import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import _newArrowCheck from "@babel/runtime/helpers/newArrowCheck";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.join.js";
import "core-js/modules/es.array.flat.js";
import "core-js/modules/es.array.map.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Copyright 2021 Silicon Hills LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import execa from 'execa';
import path from 'path';

var Git = /*#__PURE__*/function () {
  function Git() {
    var gitPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();
    var logger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : console;

    _classCallCheck(this, Git);

    this.gitPath = gitPath;
    this.logger = logger;
  }

  _createClass(Git, [{
    key: "filterRepo",
    value: function () {
      var _filterRepo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var options,
            args,
            _help$force$options,
            blobCallback,
            commitCallback,
            emailCallback,
            filenameCallback,
            force,
            help,
            importScripts,
            messageCallback,
            nameCallback,
            refnameCallback,
            refs,
            resetCallback,
            tagCallback,
            argsArr,
            _args = arguments;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
                args = _args.length > 1 && _args[1] !== undefined ? _args[1] : [];
                _help$force$options = _objectSpread({
                  help: false,
                  force: false
                }, options), blobCallback = _help$force$options.blobCallback, commitCallback = _help$force$options.commitCallback, emailCallback = _help$force$options.emailCallback, filenameCallback = _help$force$options.filenameCallback, force = _help$force$options.force, help = _help$force$options.help, importScripts = _help$force$options.importScripts, messageCallback = _help$force$options.messageCallback, nameCallback = _help$force$options.nameCallback, refnameCallback = _help$force$options.refnameCallback, refs = _help$force$options.refs, resetCallback = _help$force$options.resetCallback, tagCallback = _help$force$options.tagCallback;
                delete options.help;
                argsArr = [].concat(_toConsumableArray(Array.isArray(args) ? args : [args]), _toConsumableArray(blobCallback ? ['--blob-callback', this.renderCallback(blobCallback, importScripts)] : []), _toConsumableArray(commitCallback ? ['--commit-callback', this.renderCallback(commitCallback, importScripts)] : []), _toConsumableArray(emailCallback ? ['--email-callback', this.renderCallback(emailCallback, importScripts)] : []), _toConsumableArray(filenameCallback ? ['--filename-callback', this.renderCallback(filenameCallback, importScripts)] : []), _toConsumableArray(help ? ['-h'] : []), _toConsumableArray(messageCallback ? ['--message-callback', this.renderCallback(messageCallback, importScripts)] : []), _toConsumableArray(nameCallback ? ['--name-callback', this.renderCallback(nameCallback, importScripts)] : []), _toConsumableArray(refnameCallback ? ['--refname-callback', this.renderCallback(refnameCallback, importScripts)] : []), _toConsumableArray(refs ? [refs].flat().join(' ') : ''), _toConsumableArray(resetCallback ? ['--reset-callback', this.renderCallback(resetCallback, importScripts)] : []), _toConsumableArray(tagCallback ? ['--tag-callback', this.renderCallback(tagCallback, importScripts)] : []), [force ? '--force' : '']);
                return _context.abrupt("return", this.run(['filter-repo'].concat(_toConsumableArray(argsArr)), options));

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function filterRepo() {
        return _filterRepo.apply(this, arguments);
      }

      return filterRepo;
    }()
  }, {
    key: "run",
    value: function () {
      var _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(args) {
        var _p$stdout;

        var options,
            _dryrun$pipe$cwd$opti,
            cwd,
            pipe,
            dryrun,
            argsArr,
            command,
            p,
            _yield$p,
            stdout,
            _args2 = arguments;

        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
                _dryrun$pipe$cwd$opti = _objectSpread({
                  dryrun: false,
                  pipe: false,
                  cwd: this.gitPath
                }, options), cwd = _dryrun$pipe$cwd$opti.cwd, pipe = _dryrun$pipe$cwd$opti.pipe, dryrun = _dryrun$pipe$cwd$opti.dryrun;
                argsArr = _toConsumableArray(Array.isArray(args) ? args : [args]);
                command = "git ".concat(argsArr.join(' '));

                if (!dryrun) {
                  _context2.next = 7;
                  break;
                }

                this.logger.info(command);
                return _context2.abrupt("return", command);

              case 7:
                p = execa('sh', ['-c', command], {
                  stdio: 'pipe',
                  cwd: cwd
                });
                if (pipe) (_p$stdout = p.stdout) === null || _p$stdout === void 0 ? void 0 : _p$stdout.pipe(process.stdout);
                _context2.next = 11;
                return p;

              case 11:
                _yield$p = _context2.sent;
                stdout = _yield$p.stdout;
                _context2.prev = 13;
                return _context2.abrupt("return", JSON.parse(stdout));

              case 17:
                _context2.prev = 17;
                _context2.t0 = _context2["catch"](13);
                return _context2.abrupt("return", stdout);

              case 20:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[13, 17]]);
      }));

      function run(_x) {
        return _run.apply(this, arguments);
      }

      return run;
    }()
  }, {
    key: "renderCallback",
    value: function renderCallback(python) {
      var _this = this;

      var importScripts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      return "\"\n".concat(importScripts.map(function (importScript) {
        _newArrowCheck(this, _this);

        return this.pythonImportScript(importScript);
      }.bind(this)).join('\n'), "\n").concat(python, "\n\"");
    }
  }, {
    key: "pythonImportScript",
    value: function pythonImportScript(scriptName) {
      var scriptsPath = path.resolve(__dirname, '../scripts');
      var scriptPath = path.resolve(scriptsPath, "".concat(scriptName, ".py"));
      return "\nfrom datetime import datetime, timezone\nfrom importlib import util\nimport os\nspec = util.spec_from_file_location('".concat(scriptName, "', '").concat(scriptPath, "')\n").concat(scriptName, " = util.module_from_spec(spec)\nspec.loader.exec_module(").concat(scriptName, ")\n");
    }
  }]);

  return Git;
}();

export { Git as default };
//# sourceMappingURL=git.js.map