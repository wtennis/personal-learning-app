import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import _newArrowCheck from "@babel/runtime/helpers/newArrowCheck";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.array.concat.js";
import _regeneratorRuntime from "@babel/runtime/regenerator";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Copyright 2021 Silicon Hills LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Git from "./git";
import GitDate from "./gitDate";
import Pip from "./pip";
import Socket from "./socket";
var gitDate = new GitDate();

var GitFilterRepo = /*#__PURE__*/function () {
  function GitFilterRepo() {
    var gitPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();
    var options = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, GitFilterRepo);

    this.gitPath = gitPath;
    this.git = void 0;
    this.pip = void 0;
    this.options = void 0;
    this.options = _objectSpread({
      pipe: true
    }, options);
    this.git = new Git(gitPath);
    this.pip = new Pip(gitPath);
  }

  _createClass(GitFilterRepo, [{
    key: "ensure",
    value: function () {
      var _ensure = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var previousPath;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                previousPath = this.gitPath;
                process.chdir(this.gitPath);
                _context.next = 4;
                return this.installed();

              case 4:
                if (_context.sent) {
                  _context.next = 7;
                  break;
                }

                _context.next = 7;
                return this.pip.install('git-filter-repo', {
                  user: true,
                  pipe: this.options.pipe
                });

              case 7:
                process.chdir(previousPath);

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function ensure() {
        return _ensure.apply(this, arguments);
      }

      return ensure;
    }()
  }, {
    key: "installed",
    value: function () {
      var _installed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var _execaErr$stderr, execaErr;

        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                _context2.next = 3;
                return this.git.filterRepo({
                  help: true,
                  pipe: this.options.pipe
                });

              case 3:
                return _context2.abrupt("return", true);

              case 6:
                _context2.prev = 6;
                _context2.t0 = _context2["catch"](0);
                execaErr = _context2.t0;

                if (!(((_execaErr$stderr = execaErr.stderr) === null || _execaErr$stderr === void 0 ? void 0 : _execaErr$stderr.indexOf('is not a git command')) > -1)) {
                  _context2.next = 11;
                  break;
                }

                return _context2.abrupt("return", false);

              case 11:
                throw _context2.t0;

              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[0, 6]]);
      }));

      function installed() {
        return _installed.apply(this, arguments);
      }

      return installed;
    }()
  }, {
    key: "blobCallback",
    value: function () {
      var _blobCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(callback) {
        var options,
            _args4 = arguments;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
                return _context4.abrupt("return", this.callback('blob', options, /*#__PURE__*/function () {
                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(blob) {
                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            return _context3.abrupt("return", callback(blob));

                          case 1:
                          case "end":
                            return _context3.stop();
                        }
                      }
                    }, _callee3);
                  }));

                  return function (_x2) {
                    return _ref.apply(this, arguments);
                  };
                }()));

              case 2:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function blobCallback(_x) {
        return _blobCallback.apply(this, arguments);
      }

      return blobCallback;
    }()
  }, {
    key: "commitCallback",
    value: function () {
      var _commitCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(callback) {
        var options,
            _args6 = arguments;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                options = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};
                return _context6.abrupt("return", this.callback('commit', options, /*#__PURE__*/function () {
                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(pythonCommit) {
                    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            _context5.t0 = commitToPythonCommit;
                            _context5.next = 3;
                            return callback(pythonCommitToCommit(pythonCommit));

                          case 3:
                            _context5.t1 = _context5.sent;
                            return _context5.abrupt("return", (0, _context5.t0)(_context5.t1));

                          case 5:
                          case "end":
                            return _context5.stop();
                        }
                      }
                    }, _callee5);
                  }));

                  return function (_x4) {
                    return _ref2.apply(this, arguments);
                  };
                }()));

              case 2:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function commitCallback(_x3) {
        return _commitCallback.apply(this, arguments);
      }

      return commitCallback;
    }()
  }, {
    key: "tagCallback",
    value: function () {
      var _tagCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(callback) {
        var _this = this;

        var options,
            _args7 = arguments;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                options = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};
                return _context7.abrupt("return", this.callback('tag', options, function (tag) {
                  _newArrowCheck(this, _this);

                  return callback(tag);
                }.bind(this)));

              case 2:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function tagCallback(_x5) {
        return _tagCallback.apply(this, arguments);
      }

      return tagCallback;
    }()
  }, {
    key: "resetCallback",
    value: function () {
      var _resetCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(callback) {
        var options,
            _args9 = arguments;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};
                return _context9.abrupt("return", this.callback('reset', options, /*#__PURE__*/function () {
                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(reset) {
                    return _regeneratorRuntime.wrap(function _callee8$(_context8) {
                      while (1) {
                        switch (_context8.prev = _context8.next) {
                          case 0:
                            return _context8.abrupt("return", callback(reset));

                          case 1:
                          case "end":
                            return _context8.stop();
                        }
                      }
                    }, _callee8);
                  }));

                  return function (_x7) {
                    return _ref3.apply(this, arguments);
                  };
                }()));

              case 2:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function resetCallback(_x6) {
        return _resetCallback.apply(this, arguments);
      }

      return resetCallback;
    }()
  }, {
    key: "filenameCallback",
    value: function () {
      var _filenameCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(callback) {
        var options,
            _args11 = arguments;
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                options = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : {};
                return _context11.abrupt("return", this.callback('filename', options, /*#__PURE__*/function () {
                  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(filename) {
                    return _regeneratorRuntime.wrap(function _callee10$(_context10) {
                      while (1) {
                        switch (_context10.prev = _context10.next) {
                          case 0:
                            return _context10.abrupt("return", callback(filename));

                          case 1:
                          case "end":
                            return _context10.stop();
                        }
                      }
                    }, _callee10);
                  }));

                  return function (_x9) {
                    return _ref4.apply(this, arguments);
                  };
                }()));

              case 2:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function filenameCallback(_x8) {
        return _filenameCallback.apply(this, arguments);
      }

      return filenameCallback;
    }()
  }, {
    key: "messageCallback",
    value: function () {
      var _messageCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(callback) {
        var options,
            _args13 = arguments;
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                options = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : {};
                return _context13.abrupt("return", this.callback('message', options, /*#__PURE__*/function () {
                  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(message) {
                    return _regeneratorRuntime.wrap(function _callee12$(_context12) {
                      while (1) {
                        switch (_context12.prev = _context12.next) {
                          case 0:
                            return _context12.abrupt("return", callback(message));

                          case 1:
                          case "end":
                            return _context12.stop();
                        }
                      }
                    }, _callee12);
                  }));

                  return function (_x11) {
                    return _ref5.apply(this, arguments);
                  };
                }()));

              case 2:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function messageCallback(_x10) {
        return _messageCallback.apply(this, arguments);
      }

      return messageCallback;
    }()
  }, {
    key: "nameCallback",
    value: function () {
      var _nameCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(callback) {
        var options,
            _args15 = arguments;
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                options = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : {};
                return _context15.abrupt("return", this.callback('name', options, /*#__PURE__*/function () {
                  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(name) {
                    return _regeneratorRuntime.wrap(function _callee14$(_context14) {
                      while (1) {
                        switch (_context14.prev = _context14.next) {
                          case 0:
                            return _context14.abrupt("return", callback(name));

                          case 1:
                          case "end":
                            return _context14.stop();
                        }
                      }
                    }, _callee14);
                  }));

                  return function (_x13) {
                    return _ref6.apply(this, arguments);
                  };
                }()));

              case 2:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function nameCallback(_x12) {
        return _nameCallback.apply(this, arguments);
      }

      return nameCallback;
    }()
  }, {
    key: "emailCallback",
    value: function () {
      var _emailCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(callback) {
        var options,
            _args17 = arguments;
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                options = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : {};
                return _context17.abrupt("return", this.callback('email', options, /*#__PURE__*/function () {
                  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(email) {
                    return _regeneratorRuntime.wrap(function _callee16$(_context16) {
                      while (1) {
                        switch (_context16.prev = _context16.next) {
                          case 0:
                            return _context16.abrupt("return", callback(email));

                          case 1:
                          case "end":
                            return _context16.stop();
                        }
                      }
                    }, _callee16);
                  }));

                  return function (_x15) {
                    return _ref7.apply(this, arguments);
                  };
                }()));

              case 2:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function emailCallback(_x14) {
        return _emailCallback.apply(this, arguments);
      }

      return emailCallback;
    }()
  }, {
    key: "refnameCallback",
    value: function () {
      var _refnameCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(callback) {
        var options,
            _args19 = arguments;
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                options = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : {};
                return _context19.abrupt("return", this.callback('refname', options, /*#__PURE__*/function () {
                  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(refname) {
                    return _regeneratorRuntime.wrap(function _callee18$(_context18) {
                      while (1) {
                        switch (_context18.prev = _context18.next) {
                          case 0:
                            return _context18.abrupt("return", callback(refname));

                          case 1:
                          case "end":
                            return _context18.stop();
                        }
                      }
                    }, _callee18);
                  }));

                  return function (_x17) {
                    return _ref8.apply(this, arguments);
                  };
                }()));

              case 2:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function refnameCallback(_x16) {
        return _refnameCallback.apply(this, arguments);
      }

      return refnameCallback;
    }()
  }, {
    key: "callback",
    value: function () {
      var _callback2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(name) {
        var _this2 = this,
            _objectSpread2;

        var options,
            _callback,
            socket,
            result,
            _args20 = arguments;

        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                options = _args20.length > 1 && _args20[1] !== undefined ? _args20[1] : {};
                _callback = _args20.length > 2 && _args20[2] !== undefined ? _args20[2] : function () {
                  _newArrowCheck(this, _this2);

                  return null;
                }.bind(this);
                _context20.next = 4;
                return this.ensure();

              case 4:
                socket = new Socket('captain_hook', _defineProperty({}, "".concat(name, "Callback"), _callback));
                _context20.next = 7;
                return socket.connect();

              case 7:
                _context20.next = 9;
                return this.git.filterRepo(_objectSpread(_objectSpread({
                  force: true
                }, options), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, "".concat(name, "Callback"), "return callbacks.callback('".concat(name, "', ").concat(name, ")")), _defineProperty(_objectSpread2, "pipe", this.options.pipe), _defineProperty(_objectSpread2, "importScripts", ['callbacks']), _objectSpread2)));

              case 9:
                result = _context20.sent;
                _context20.next = 12;
                return socket.close();

              case 12:
                return _context20.abrupt("return", result);

              case 13:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function callback(_x18) {
        return _callback2.apply(this, arguments);
      }

      return callback;
    }()
  }, {
    key: "help",
    value: function () {
      var _help = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21() {
        var options,
            _args21 = arguments;
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                options = _args21.length > 0 && _args21[0] !== undefined ? _args21[0] : {};
                return _context21.abrupt("return", this.git.filterRepo(_objectSpread(_objectSpread({}, options), {}, {
                  help: true,
                  pipe: this.options.pipe
                })));

              case 2:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function help() {
        return _help.apply(this, arguments);
      }

      return help;
    }()
  }]);

  return GitFilterRepo;
}();

export { GitFilterRepo as default };
export var Operator;

(function (Operator) {
  Operator["Equal"] = "=";
  Operator["GreaterThan"] = ">";
  Operator["GreaterThanOrEqual"] = ">=";
  Operator["LessThan"] = "<";
  Operator["LessThanOrEqual"] = "<=";
  Operator["NotEqual"] = "!=";
})(Operator || (Operator = {}));

export function pythonCommitToCommit(pythonCommit) {
  return {
    authorDate: gitDate.dateFromGitDate(pythonCommit.author_date),
    authorEmail: pythonCommit.author_email,
    authorName: pythonCommit.author_name,
    branch: pythonCommit.branch,
    committerDate: gitDate.dateFromGitDate(pythonCommit.committer_date),
    committerEmail: pythonCommit.committer_email,
    committerName: pythonCommit.committer_name,
    dumped: pythonCommit.dumped,
    id: pythonCommit.id,
    message: pythonCommit.message,
    oldId: pythonCommit.old_id,
    originalId: pythonCommit.original_id,
    type: pythonCommit.type
  };
}
export function commitToPythonCommit(commit) {
  return {
    author_date: gitDate.gitDateFromDate(commit.authorDate),
    author_email: commit.authorEmail,
    author_name: commit.authorName,
    branch: commit.branch,
    committer_date: gitDate.gitDateFromDate(commit.committerDate),
    committer_email: commit.committerEmail,
    committer_name: commit.committerName,
    dumped: commit.dumped,
    id: commit.id,
    message: commit.message,
    old_id: commit.oldId,
    original_id: commit.originalId,
    type: commit.type
  };
}
//# sourceMappingURL=gitFilterRepo.js.map