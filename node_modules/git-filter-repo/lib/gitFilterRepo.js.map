{"version":3,"sources":["../src/gitFilterRepo.ts"],"names":["gitDate","GitDate","GitFilterRepo","gitPath","process","cwd","options","git","pip","pipe","Git","Pip","previousPath","chdir","installed","install","user","filterRepo","help","execaErr","stderr","indexOf","callback","blob","pythonCommit","commitToPythonCommit","pythonCommitToCommit","tag","reset","filename","message","name","email","refname","ensure","socket","Socket","connect","force","result","close","Operator","authorDate","dateFromGitDate","author_date","authorEmail","author_email","authorName","author_name","branch","committerDate","committer_date","committerEmail","committer_email","committerName","committer_name","dumped","id","oldId","old_id","originalId","original_id","type","commit","gitDateFromDate"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,MAAMA,OAAO,GAAG,IAAIC,gBAAJ,EAAhB;;MAEqBC,a;AAOnB,6BAAuE;AAAA,UAApDC,OAAoD,uEAA1CC,OAAO,CAACC,GAAR,EAA0C;AAAA,UAA3BC,OAA2B;AAAA;AAAA,WAApDH,OAAoD,GAApDA,OAAoD;AAAA,WAN/DI,GAM+D;AAAA,WAJ/DC,GAI+D;AAAA,WAF/DF,OAE+D;AACrE,WAAKA,OAAL;AACEG,QAAAA,IAAI,EAAE;AADR,SAEKH,OAFL;AAIA,WAAKC,GAAL,GAAW,IAAIG,YAAJ,CAAQP,OAAR,CAAX;AACA,WAAKK,GAAL,GAAW,IAAIG,YAAJ,CAAQR,OAAR,CAAX;AACD;;;;;8FAED;AAAA;AAAA;AAAA;AAAA;AAAA;AACQS,kBAAAA,YADR,GACuB,KAAKT,OAD5B;AAEEC,kBAAAA,OAAO,CAACS,KAAR,CAAc,KAAKV,OAAnB;AAFF;AAAA,yBAGc,KAAKW,SAAL,EAHd;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAIU,KAAKN,GAAL,CAASO,OAAT,CAAiB,iBAAjB,EAAoC;AACxCC,oBAAAA,IAAI,EAAE,IADkC;AAExCP,oBAAAA,IAAI,EAAE,KAAKH,OAAL,CAAaG;AAFqB,mBAApC,CAJV;;AAAA;AASEL,kBAAAA,OAAO,CAACS,KAAR,CAAcD,YAAd;;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,S;;;;;;;;;;;iGAYA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEU,KAAKL,GAAL,CAASU,UAAT,CAAoB;AAAEC,oBAAAA,IAAI,EAAE,IAAR;AAAcT,oBAAAA,IAAI,EAAE,KAAKH,OAAL,CAAaG;AAAjC,mBAApB,CAFV;;AAAA;AAAA,oDAGW,IAHX;;AAAA;AAAA;AAAA;AAKUU,kBAAAA,QALV;;AAAA,wBAMQ,qBAAAA,QAAQ,CAACC,MAAT,sEAAiBC,OAAjB,CAAyB,sBAAzB,KAAmD,CAAC,CAN5D;AAAA;AAAA;AAAA;;AAAA,oDAOa,KAPb;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,S;;;;;;;;;;;oGAaA,kBACEC,QADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEEhB,kBAAAA,OAFF,8DAEgD,EAFhD;AAAA,oDAIS,KAAKgB,QAAL,CAAc,MAAd,EAAsBhB,OAAtB;AAAA,uGAA+B,kBAAOiB,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA,gEAC7BD,QAAQ,CAACC,IAAD,CADqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA/B;;AAAA;AAAA;AAAA;AAAA,sBAJT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,S;;;;;;;;;;;sGASA,kBACED,QADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEEhB,kBAAAA,OAFF,8DAEkD,EAFlD;AAAA,oDAIS,KAAKgB,QAAL,CACL,QADK,EAELhB,OAFK;AAAA,wGAGL,kBAAOkB,YAAP;AAAA;AAAA;AAAA;AAAA;AAAA,6CACSC,oBADT;AAAA;AAAA,qCAEUH,QAAQ,CAACI,oBAAoB,CAACF,YAAD,CAArB,CAFlB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAHK;;AAAA;AAAA;AAAA;AAAA,sBAJT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,S;;;;;;;;;;;mGAeA,kBACEF,QADF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEEhB,kBAAAA,OAFF,8DAE+C,EAF/C;AAAA,oDAIS,KAAKgB,QAAL,CAAc,KAAd,EAAqBhB,OAArB,EAA8B,UAACqB,GAAD,EAAc;AAAA;AACjD,2BAAOL,QAAQ,CAACK,GAAD,CAAf;AACD,mBAFM,YAJT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,S;;;;;;;;;;;qGASA,kBACEL,QADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEEhB,kBAAAA,OAFF,8DAEiD,EAFjD;AAAA,oDAIS,KAAKgB,QAAL,CAAc,OAAd,EAAuBhB,OAAvB;AAAA,wGAAgC,kBAAOsB,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA,gEAC9BN,QAAQ,CAACM,KAAD,CADsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAhC;;AAAA;AAAA;AAAA;AAAA,sBAJT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,S;;;;;;;;;;;wGASA,mBACEN,QADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEEhB,kBAAAA,OAFF,iEAEoD,EAFpD;AAAA,qDAIS,KAAKgB,QAAL,CAAc,UAAd,EAA0BhB,OAA1B;AAAA,wGAAmC,mBAAOuB,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA,iEACjCP,QAAQ,CAACO,QAAD,CADyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAnC;;AAAA;AAAA;AAAA;AAAA,sBAJT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,S;;;;;;;;;;;uGASA,mBACEP,QADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEEhB,kBAAAA,OAFF,iEAEmD,EAFnD;AAAA,qDAIS,KAAKgB,QAAL,CAAc,SAAd,EAAyBhB,OAAzB;AAAA,wGAAkC,mBAAOwB,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA,iEAChCR,QAAQ,CAACQ,OAAD,CADwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAlC;;AAAA;AAAA;AAAA;AAAA,sBAJT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,S;;;;;;;;;;;oGASA,mBACER,QADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEEhB,kBAAAA,OAFF,iEAEgD,EAFhD;AAAA,qDAIS,KAAKgB,QAAL,CAAc,MAAd,EAAsBhB,OAAtB;AAAA,wGAA+B,mBAAOyB,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA,iEAC7BT,QAAQ,CAACS,IAAD,CADqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA/B;;AAAA;AAAA;AAAA;AAAA,sBAJT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,S;;;;;;;;;;;qGASA,mBACET,QADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEEhB,kBAAAA,OAFF,iEAEiD,EAFjD;AAAA,qDAIS,KAAKgB,QAAL,CAAc,OAAd,EAAuBhB,OAAvB;AAAA,wGAAgC,mBAAO0B,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA,iEAC9BV,QAAQ,CAACU,KAAD,CADsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAhC;;AAAA;AAAA;AAAA;AAAA,sBAJT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,S;;;;;;;;;;;uGASA,mBACEV,QADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEEhB,kBAAAA,OAFF,iEAEmD,EAFnD;AAAA,qDAIS,KAAKgB,QAAL,CAAc,SAAd,EAAyBhB,OAAzB;AAAA,wGAAkC,mBAAO2B,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA,iEAChCX,QAAQ,CAACW,OAAD,CADwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAlC;;AAAA;AAAA;AAAA;AAAA,sBAJT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,S;;;;;;;;;;;iGASA,mBACEF,IADF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEEzB,kBAAAA,OAFF,iEAE2C,EAF3C;AAGEgB,kBAAAA,SAHF,iEAGsC;AAAA;AAAA,2BAAM,IAAN;AAAA,mBAHtC;AAAA;AAAA,yBAKQ,KAAKY,MAAL,EALR;;AAAA;AAMQC,kBAAAA,MANR,GAMiB,IAAIC,eAAJ,CAAW,cAAX,8CACTL,IADS,eACQT,SADR,EANjB;AAAA;AAAA,yBASQa,MAAM,CAACE,OAAP,EATR;;AAAA;AAAA;AAAA,yBAUuB,KAAK9B,GAAL,CAASU,UAAT;AACnBqB,oBAAAA,KAAK,EAAE;AADY,qBAEhBhC,OAFgB,qFAGfyB,IAHe,oDAGgCA,IAHhC,gBAG0CA,IAH1C,+DAIb,KAAKzB,OAAL,CAAaG,IAJA,kEAKJ,CAAC,WAAD,CALI,oBAVvB;;AAAA;AAUQ8B,kBAAAA,MAVR;AAAA;AAAA,yBAiBQJ,MAAM,CAACK,KAAP,EAjBR;;AAAA;AAAA,qDAkBSD,MAlBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,S;;;;;;;;;;;4FAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAWjC,kBAAAA,OAAX,iEAAqD,EAArD;AAAA,qDACS,KAAKC,GAAL,CAASU,UAAT,iCACFX,OADE;AAELY,oBAAAA,IAAI,EAAE,IAFD;AAGLT,oBAAAA,IAAI,EAAE,KAAKH,OAAL,CAAaG;AAHd,qBADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,S;;;;;;;;;;;;;MAuCUgC,Q;;;aAAAA,Q;AAAAA,IAAAA,Q;AAAAA,IAAAA,Q;AAAAA,IAAAA,Q;AAAAA,IAAAA,Q;AAAAA,IAAAA,Q;AAAAA,IAAAA,Q;KAAAA,Q,yBAAAA,Q;;AAyDL,WAASf,oBAAT,CAA8BF,YAA9B,EAAkE;AACvE,WAAO;AACLkB,MAAAA,UAAU,EAAE1C,OAAO,CAAC2C,eAAR,CAAwBnB,YAAY,CAACoB,WAArC,CADP;AAELC,MAAAA,WAAW,EAAErB,YAAY,CAACsB,YAFrB;AAGLC,MAAAA,UAAU,EAAEvB,YAAY,CAACwB,WAHpB;AAILC,MAAAA,MAAM,EAAEzB,YAAY,CAACyB,MAJhB;AAKLC,MAAAA,aAAa,EAAElD,OAAO,CAAC2C,eAAR,CAAwBnB,YAAY,CAAC2B,cAArC,CALV;AAMLC,MAAAA,cAAc,EAAE5B,YAAY,CAAC6B,eANxB;AAOLC,MAAAA,aAAa,EAAE9B,YAAY,CAAC+B,cAPvB;AAQLC,MAAAA,MAAM,EAAEhC,YAAY,CAACgC,MARhB;AASLC,MAAAA,EAAE,EAAEjC,YAAY,CAACiC,EATZ;AAUL3B,MAAAA,OAAO,EAAEN,YAAY,CAACM,OAVjB;AAWL4B,MAAAA,KAAK,EAAElC,YAAY,CAACmC,MAXf;AAYLC,MAAAA,UAAU,EAAEpC,YAAY,CAACqC,WAZpB;AAaLC,MAAAA,IAAI,EAAEtC,YAAY,CAACsC;AAbd,KAAP;AAeD;;AAEM,WAASrC,oBAAT,CAA8BsC,MAA9B,EAA4D;AACjE,WAAO;AACLnB,MAAAA,WAAW,EAAE5C,OAAO,CAACgE,eAAR,CAAwBD,MAAM,CAACrB,UAA/B,CADR;AAELI,MAAAA,YAAY,EAAEiB,MAAM,CAAClB,WAFhB;AAGLG,MAAAA,WAAW,EAAEe,MAAM,CAAChB,UAHf;AAILE,MAAAA,MAAM,EAAEc,MAAM,CAACd,MAJV;AAKLE,MAAAA,cAAc,EAAEnD,OAAO,CAACgE,eAAR,CAAwBD,MAAM,CAACb,aAA/B,CALX;AAMLG,MAAAA,eAAe,EAAEU,MAAM,CAACX,cANnB;AAOLG,MAAAA,cAAc,EAAEQ,MAAM,CAACT,aAPlB;AAQLE,MAAAA,MAAM,EAAEO,MAAM,CAACP,MARV;AASLC,MAAAA,EAAE,EAAEM,MAAM,CAACN,EATN;AAUL3B,MAAAA,OAAO,EAAEiC,MAAM,CAACjC,OAVX;AAWL6B,MAAAA,MAAM,EAAEI,MAAM,CAACL,KAXV;AAYLG,MAAAA,WAAW,EAAEE,MAAM,CAACH,UAZf;AAaLE,MAAAA,IAAI,EAAEC,MAAM,CAACD;AAbR,KAAP;AAeD","sourcesContent":["/**\n * Copyright 2021 Silicon Hills LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DateArr } from 'kiss-date';\nimport { ExecaError } from 'execa';\nimport Git, { GitFilterRepoOptions } from './git';\nimport GitDate from './gitDate';\nimport Pip from './pip';\nimport Socket from './socket';\nimport { Options } from './types';\n\nconst gitDate = new GitDate();\n\nexport default class GitFilterRepo {\n  private git: Git;\n\n  private pip: Pip;\n\n  private options: Options;\n\n  constructor(public gitPath = process.cwd(), options: Partial<Options>) {\n    this.options = {\n      pipe: true,\n      ...options\n    };\n    this.git = new Git(gitPath);\n    this.pip = new Pip(gitPath);\n  }\n\n  async ensure(): Promise<any> {\n    const previousPath = this.gitPath;\n    process.chdir(this.gitPath);\n    if (!(await this.installed())) {\n      await this.pip.install('git-filter-repo', {\n        user: true,\n        pipe: this.options.pipe\n      });\n    }\n    process.chdir(previousPath);\n  }\n\n  async installed(): Promise<boolean> {\n    try {\n      await this.git.filterRepo({ help: true, pipe: this.options.pipe });\n      return true;\n    } catch (err) {\n      const execaErr: ExecaError = err;\n      if (execaErr.stderr?.indexOf('is not a git command') > -1) {\n        return false;\n      }\n      throw err;\n    }\n  }\n\n  async blobCallback(\n    callback: (blob: Blob) => Blob | Promise<Blob>,\n    options: Partial<FilterBlobCallbackOptions> = {}\n  ) {\n    return this.callback('blob', options, async (blob: Blob) => {\n      return callback(blob);\n    });\n  }\n\n  async commitCallback(\n    callback: (commit: Commit) => Commit | Promise<Commit>,\n    options: Partial<FilterCommitCallbackOptions> = {}\n  ) {\n    return this.callback(\n      'commit',\n      options,\n      async (pythonCommit: PythonCommit) => {\n        return commitToPythonCommit(\n          await callback(pythonCommitToCommit(pythonCommit))\n        );\n      }\n    );\n  }\n\n  async tagCallback(\n    callback: (tag: Tag) => Tag | Promise<Tag>,\n    options: Partial<FilterTagCallbackOptions> = {}\n  ) {\n    return this.callback('tag', options, (tag: Tag) => {\n      return callback(tag);\n    });\n  }\n\n  async resetCallback(\n    callback: (reset: Reset) => Reset | Promise<Reset>,\n    options: Partial<FilterResetCallbackOptions> = {}\n  ) {\n    return this.callback('reset', options, async (reset: Reset) => {\n      return callback(reset);\n    });\n  }\n\n  async filenameCallback(\n    callback: (filename: Filename) => Filename | Promise<Filename>,\n    options: Partial<FilterFilenameCallbackOptions> = {}\n  ) {\n    return this.callback('filename', options, async (filename: Filename) => {\n      return callback(filename);\n    });\n  }\n\n  async messageCallback(\n    callback: (message: Message) => Message | Promise<Message>,\n    options: Partial<FilterMessageCallbackOptions> = {}\n  ) {\n    return this.callback('message', options, async (message: Message) => {\n      return callback(message);\n    });\n  }\n\n  async nameCallback(\n    callback: (name: Name) => Name | Promise<Name>,\n    options: Partial<FilterNameCallbackOptions> = {}\n  ) {\n    return this.callback('name', options, async (name: Name) => {\n      return callback(name);\n    });\n  }\n\n  async emailCallback(\n    callback: (email: Email) => Email | Promise<Email>,\n    options: Partial<FilterEmailCallbackOptions> = {}\n  ) {\n    return this.callback('email', options, async (email: Email) => {\n      return callback(email);\n    });\n  }\n\n  async refnameCallback(\n    callback: (refname: Refname) => Refname | Promise<Refname>,\n    options: Partial<FilterRefnameCallbackOptions> = {}\n  ) {\n    return this.callback('refname', options, async (refname: Refname) => {\n      return callback(refname);\n    });\n  }\n\n  async callback(\n    name: string,\n    options: Partial<GitFilterRepoOptions> = {},\n    callback: (...args: any[]) => any = () => null\n  ) {\n    await this.ensure();\n    const socket = new Socket('captain_hook', {\n      [`${name}Callback`]: callback\n    });\n    await socket.connect();\n    const result = await this.git.filterRepo({\n      force: true,\n      ...options,\n      [`${name}Callback`]: `return callbacks.callback('${name}', ${name})`,\n      pipe: this.options.pipe,\n      importScripts: ['callbacks']\n    });\n    await socket.close();\n    return result;\n  }\n\n  async help(options: Partial<FilterRepoHelpOptions> = {}) {\n    return this.git.filterRepo({\n      ...options,\n      help: true,\n      pipe: this.options.pipe\n    });\n  }\n}\n\nexport interface FilterRepoHelpOptions\n  extends Omit<GitFilterRepoOptions, 'help'> {}\n\nexport interface FilterBlobCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'blobCallback' | 'pipe'> {}\n\nexport interface FilterCommitCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'commitCallback' | 'pipe'> {}\n\nexport interface FilterTagCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'tagCallback' | 'pipe'> {}\n\nexport interface FilterResetCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'resetCallback' | 'pipe'> {}\n\nexport interface FilterFilenameCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'filenameCallback' | 'pipe'> {}\n\nexport interface FilterMessageCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'messageCallback' | 'pipe'> {}\n\nexport interface FilterNameCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'nameCallback' | 'pipe'> {}\n\nexport interface FilterEmailCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'emailCallback' | 'pipe'> {}\n\nexport interface FilterRefnameCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'refnameCallback' | 'pipe'> {}\n\nexport enum Operator {\n  Equal = '=',\n  GreaterThan = '>',\n  GreaterThanOrEqual = '>=',\n  LessThan = '<',\n  LessThanOrEqual = '<=',\n  NotEqual = '!='\n}\n\nexport interface PythonCommit {\n  author_date: string;\n  author_email: string;\n  author_name: string;\n  branch: string;\n  committer_date: string;\n  committer_email: string;\n  committer_name: string;\n  dumped: number;\n  id: number;\n  message: string;\n  old_id: number;\n  original_id: string;\n  type: string;\n}\n\nexport type Blob = any;\n\nexport type Name = string;\n\nexport type Filename = string;\n\nexport type Tag = string;\n\nexport type Email = string;\n\nexport type Message = string;\n\nexport type Reset = any;\n\nexport type Refname = any;\n\nexport interface Commit {\n  authorDate: DateArr;\n  authorEmail: string;\n  authorName: string;\n  branch: string;\n  committerDate: DateArr;\n  committerEmail: string;\n  committerName: string;\n  dumped: number;\n  id: number;\n  message: string;\n  oldId: number;\n  originalId: string;\n  type: string;\n}\n\nexport function pythonCommitToCommit(pythonCommit: PythonCommit): Commit {\n  return {\n    authorDate: gitDate.dateFromGitDate(pythonCommit.author_date),\n    authorEmail: pythonCommit.author_email,\n    authorName: pythonCommit.author_name,\n    branch: pythonCommit.branch,\n    committerDate: gitDate.dateFromGitDate(pythonCommit.committer_date),\n    committerEmail: pythonCommit.committer_email,\n    committerName: pythonCommit.committer_name,\n    dumped: pythonCommit.dumped,\n    id: pythonCommit.id,\n    message: pythonCommit.message,\n    oldId: pythonCommit.old_id,\n    originalId: pythonCommit.original_id,\n    type: pythonCommit.type\n  };\n}\n\nexport function commitToPythonCommit(commit: Commit): PythonCommit {\n  return {\n    author_date: gitDate.gitDateFromDate(commit.authorDate),\n    author_email: commit.authorEmail,\n    author_name: commit.authorName,\n    branch: commit.branch,\n    committer_date: gitDate.gitDateFromDate(commit.committerDate),\n    committer_email: commit.committerEmail,\n    committer_name: commit.committerName,\n    dumped: commit.dumped,\n    id: commit.id,\n    message: commit.message,\n    old_id: commit.oldId,\n    original_id: commit.originalId,\n    type: commit.type\n  };\n}\n"],"file":"gitFilterRepo.js"}