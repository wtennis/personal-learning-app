{"version":3,"sources":["../src/git.ts"],"names":["Git","gitPath","process","cwd","logger","console","options","args","help","force","blobCallback","commitCallback","emailCallback","filenameCallback","importScripts","messageCallback","nameCallback","refnameCallback","refs","resetCallback","tagCallback","argsArr","Array","isArray","renderCallback","flat","join","run","dryrun","pipe","command","info","p","stdio","stdout","JSON","parse","python","map","importScript","pythonImportScript","scriptName","scriptsPath","path","resolve","__dirname","scriptPath"],"mappings":"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","sourcesContent":["/**\n * Copyright 2021 Silicon Hills LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport execa from 'execa';\nimport path from 'path';\n\nexport default class Git {\n  constructor(public gitPath = process.cwd(), private logger = console) {}\n\n  async filterRepo(\n    options: Partial<GitFilterRepoOptions> = {},\n    args: string | string[] = []\n  ) {\n    const {\n      blobCallback,\n      commitCallback,\n      emailCallback,\n      filenameCallback,\n      force,\n      help,\n      importScripts,\n      messageCallback,\n      nameCallback,\n      refnameCallback,\n      refs,\n      resetCallback,\n      tagCallback\n    } = {\n      help: false,\n      force: false,\n      ...options\n    };\n    delete options.help;\n    const argsArr = [\n      ...(Array.isArray(args) ? args : [args]),\n      ...(blobCallback\n        ? ['--blob-callback', this.renderCallback(blobCallback, importScripts)]\n        : []),\n      ...(commitCallback\n        ? [\n            '--commit-callback',\n            this.renderCallback(commitCallback, importScripts)\n          ]\n        : []),\n      ...(emailCallback\n        ? [\n            '--email-callback',\n            this.renderCallback(emailCallback, importScripts)\n          ]\n        : []),\n      ...(filenameCallback\n        ? [\n            '--filename-callback',\n            this.renderCallback(filenameCallback, importScripts)\n          ]\n        : []),\n      ...(help ? ['-h'] : []),\n      ...(messageCallback\n        ? [\n            '--message-callback',\n            this.renderCallback(messageCallback, importScripts)\n          ]\n        : []),\n      ...(nameCallback\n        ? ['--name-callback', this.renderCallback(nameCallback, importScripts)]\n        : []),\n      ...(refnameCallback\n        ? [\n            '--refname-callback',\n            this.renderCallback(refnameCallback, importScripts)\n          ]\n        : []),\n      ...(refs ? [refs].flat().join(' ') : ''),\n      ...(resetCallback\n        ? [\n            '--reset-callback',\n            this.renderCallback(resetCallback, importScripts)\n          ]\n        : []),\n      ...(tagCallback\n        ? ['--tag-callback', this.renderCallback(tagCallback, importScripts)]\n        : []),\n      force ? '--force' : ''\n    ];\n    return this.run(['filter-repo', ...argsArr], options);\n  }\n\n  async run(\n    args: string | string[],\n    options: Partial<GitRunOptions> = {}\n  ): Promise<any> {\n    const { cwd, pipe, dryrun } = {\n      dryrun: false,\n      pipe: false,\n      cwd: this.gitPath,\n      ...options\n    };\n    const argsArr = [...(Array.isArray(args) ? args : [args])];\n    const command = `git ${argsArr.join(' ')}`;\n    if (dryrun) {\n      this.logger.info(command);\n      return command;\n    }\n    const p = execa('sh', ['-c', command], { stdio: 'pipe', cwd });\n    if (pipe) p.stdout?.pipe(process.stdout);\n    const { stdout } = await p;\n    try {\n      return JSON.parse(stdout);\n    } catch (err) {\n      return stdout;\n    }\n  }\n\n  private renderCallback(python: string, importScripts: string[] = []) {\n    return `\"\n${importScripts\n  .map((importScript: string) => this.pythonImportScript(importScript))\n  .join('\\n')}\n${python}\n\"`;\n  }\n\n  private pythonImportScript(scriptName: string) {\n    const scriptsPath = path.resolve(__dirname, '../scripts');\n    const scriptPath = path.resolve(scriptsPath, `${scriptName}.py`);\n    return `\nfrom datetime import datetime, timezone\nfrom importlib import util\nimport os\nspec = util.spec_from_file_location('${scriptName}', '${scriptPath}')\n${scriptName} = util.module_from_spec(spec)\nspec.loader.exec_module(${scriptName})\n`;\n  }\n}\n\nexport interface GitRunOptions {\n  cwd?: string;\n  dryrun?: boolean;\n  pipe?: boolean;\n}\n\nexport interface GitFilterRepoOptions extends GitRunOptions {\n  blobCallback?: string;\n  commitCallback?: string;\n  emailCallback?: string;\n  filenameCallback?: string;\n  force?: boolean;\n  help?: boolean;\n  importScripts?: string[];\n  messageCallback?: string;\n  nameCallback?: string;\n  refnameCallback?: string;\n  refs?: string | string[];\n  resetCallback?: string;\n  tagCallback?: string;\n}\n"],"file":"git.js"}